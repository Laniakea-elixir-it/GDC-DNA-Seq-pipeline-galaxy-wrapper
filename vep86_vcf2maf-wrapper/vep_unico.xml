<tool id="vep-unico" name="vep-unico" version="1.0.0">
    <description>
        wrapper for variant-effect-predictor86 and vcf2maf
    </description>
    <macros>
        <import>vep-unico-macros.xml</import>
        <import>vcf2maf-macros.xml</import>
        <import>vep-download-cache-macros.xml</import>
        <import>vep-annotate-macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="86">variant-effect-predictor</requirement>
	<requirement type="package" version="1.3.1">samtools</requirement>
	<requirement type="package" version="1.7.2">perl-bioperl</requirement>
    </requirements>
    <command><![CDATA[
	#if str($veptools.veptoolsselect) =="downloadcache"
	
	cd \$CONDA_DEFAULT_ENV && [[ -d vep_cache ]] || mkdir vep_cache ;
                      cd bin && perl vep_install.pl
                        -a  ac -s $veptools.species
                        --NO_HTSLIB
                        --CACHEDIR \$CONDA_DEFAULT_ENV/vep_cache;
                        ## write the cache file downloaded 
                        echo "CACHE DOWNLOADED YET">$output1;
                        ls \$CONDA_DEFAULT_ENV/vep_cache/*/ >> $output1;
	#end if

	
	#if str($veptools.veptoolsselect) =="annotate"
	 perl \$CONDA_DEFAULT_ENV/bin/variant_effect_predictor.pl
        --fork \${GALAXY_SLOTS:-4}
        --offline
        --dir \$CONDA_DEFAULT_ENV/vep_cache
        --force_overwrite
           #if $veptools.everything.value
           --everything
           #end if
        --species $veptools.species
        --buffer_size $veptools.buffer
        --vcf
        --input_file $veptools.input
        --output_file $output2
        --stats_file stat.htm 
	#end if


	#if str($veptools.veptoolsselect) =="vcf2maf"
	 ln -s $veptools.input_vcf ./input.vcf;
        perl $__tool_directory__/vcf2maf.pl
            --input-vcf ./input.vcf
            --output-maf $output_maf
            --vep-forks 1
            --tumor-id $veptools.tumour_id
            --normal-id $veptools.normal_id
            --buffer-size $veptools.buffer
            --vep-path \$CONDA_DEFAULT_ENV/bin/
            --vep-data \$CONDA_DEFAULT_ENV/vep_cache
            --ref-fasta $veptools.reference
            --species $veptools.species;

        #end if
		 ]]>
    </command>
    <inputs>
	<conditional name="veptools">
	  <param name="veptoolsselect" type="select" label="vep">
        	<option value="downloadcache" selected="true">vep-download-cache</option>
        	<option value="annotate">vep-annotate</option>
		<option value="vcf2maf">vcf2maf</option>
      	  </param>
      	   <when value="downloadcache">
		<expand macro="list-cache"/>
	   </when>
           <when value="annotate">
		<expand macro="vep-annotate-inputs-macro"/>
		<expand macro="list-cache-annotate"/>
	   </when>
	   <when value="vcf2maf">
		<expand macro="vcf2maf-inputs-macro"/>
		<expand macro="list-vcf2maf"/>
	   </when>
	</conditional>
    </inputs>
    <outputs>
	<!--vep-download-cache-outputs-->
	<data format="txt" name="output1" label="cache downloaded">
		<filter>veptools['veptoolsselect'] == 'downloadcache'</filter>
	</data>
	<!--vep-annotate-outputs-->
	<data format="vcf" name="output2" label="vep-annotated on ${on_string} ">
		<filter>veptools['veptoolsselect'] == 'annotate'</filter>
	</data>
        <data format="html" name="stat" from_work_dir="stat.htm" label="stat on ${on_string}">
		<filter>veptools['veptoolsselect'] == 'annotate'</filter>
	</data>
	<!--vcf2maf-outputs-->
	<data name="output_maf" format="maf" label="vcf2maf on ${on_string} ">
		<filter>veptools['veptoolsselect'] == 'vcf2maf'</filter>
	</data>
    </outputs>
    <stdio>
        <exit_code range="1:" level="fatal" description="Failure" />
    </stdio>
    <citations>
    <citation type="doi">10.1186/s13059-016-0974-4</citation>
    </citations>
    <help>
**IMPORTANT**
        before running vep_annotate or vcf2maf tool for the first time you have to download the cache file using vep_download_cache

	 **what it does**

		- **vep_annotate** determines the effect of your variants (SNPs, insertions, deletions, CNVs or structural variants) on genes, transcripts, and protein sequence, as well as regulatory regions.

		- **vep_download_cache** download the cache file, used by vep v.86.It is a file containing all transcript models, regulatory features and variant data for a species.

		- **vcf2maf** convert vcf in MAF format calling vep_annotate.

    </help>
</tool>
